{"version":3,"sources":["../src/utils/linkedin-extractor.ts","../src/utils/proxycurl.ts","../src/content.ts"],"sourcesContent":["import { LinkedInProfile, ExperienceItem } from '../types/profile';\n\nexport class LinkedInExtractor {\n  /**\n   * Extract profile data from LinkedIn page\n   * Tries JSON-LD blocks first, falls back to DOM parsing\n   */\n  static extractProfile(): LinkedInProfile | null {\n    try {\n      // Try JSON-LD extraction first\n      const jsonProfile = this.extractFromJsonLD();\n      if (jsonProfile) return jsonProfile;\n\n      // Fallback to DOM extraction\n      return this.extractFromDOM();\n    } catch (error) {\n      console.error('Profile extraction failed:', error);\n      return null;\n    }\n  }\n\n  private static extractFromJsonLD(): LinkedInProfile | null {\n    const scripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\n    \n    for (const script of scripts) {\n      try {\n        const data = JSON.parse(script.textContent || '');\n        if (data['@type'] === 'Person' || data.name) {\n          return {\n            fullName: data.name || '',\n            headline: data.jobTitle || data.headline || '',\n            location: data.address?.addressLocality || '',\n            company: data.worksFor?.name || '',\n            position: data.jobTitle || '',\n            profileUrl: window.location.href,\n            imageUrl: data.image || '',\n            about: data.description || ''\n          };\n        }\n      } catch (e) {\n        continue;\n      }\n    }\n\n    // Try Profile Card API data\n    const profileData = this.extractFromProfileCard();\n    if (profileData) return profileData;\n\n    return null;\n  }\n\n  private static extractFromProfileCard(): LinkedInProfile | null {\n    try {\n      // LinkedIn often stores profile data in window.voyager or similar\n      const voyagerData = (window as any).voyager;\n      if (voyagerData?.profile) {\n        const profile = voyagerData.profile;\n        return {\n          fullName: profile.firstName + ' ' + profile.lastName,\n          headline: profile.headline,\n          location: profile.locationName,\n          profileUrl: window.location.href,\n          imageUrl: profile.pictureUrl,\n          about: profile.summary\n        };\n      }\n\n      // Try Apollo cache\n      const apolloCache = (window as any).__APOLLO_STATE__;\n      if (apolloCache) {\n        // Extract from Apollo cache structure\n        const profileKeys = Object.keys(apolloCache).filter(key => \n          key.includes('Profile:') || key.includes('Person:')\n        );\n        \n        if (profileKeys.length > 0) {\n          const profileData = apolloCache[profileKeys[0]];\n          return {\n            fullName: `${profileData.firstName || ''} ${profileData.lastName || ''}`.trim(),\n            headline: profileData.headline,\n            location: profileData.geoLocationName,\n            profileUrl: window.location.href,\n            imageUrl: profileData.picture?.['com.linkedin.common.VectorImage']?.artifacts?.[0]?.fileIdentifyingUrlPathSegment\n          };\n        }\n      }\n    } catch (error) {\n      console.error('Profile card extraction failed:', error);\n    }\n    return null;\n  }\n\n  private static extractFromDOM(): LinkedInProfile | null {\n    try {\n      // Main profile section\n      const profileSection = document.querySelector('.pv-top-card') || \n                           document.querySelector('.ph5.pb5') ||\n                           document.querySelector('[data-section=\"profile\"]');\n\n      if (!profileSection) return null;\n\n      // Name extraction\n      const nameElement = profileSection.querySelector('h1') ||\n                         document.querySelector('h1.text-heading-xlarge') ||\n                         document.querySelector('[data-anonymize=\"person-name\"]');\n      \n      const fullName = nameElement?.textContent?.trim() || '';\n\n      // Headline\n      const headlineElement = profileSection.querySelector('.text-body-medium.break-words') ||\n                             document.querySelector('[data-anonymize=\"headline\"]') ||\n                             document.querySelector('.pv-top-card--headline');\n      \n      const headline = headlineElement?.textContent?.trim() || '';\n\n      // Location\n      const locationElement = profileSection.querySelector('.text-body-small.inline.t-black--light.break-words') ||\n                             document.querySelector('[data-anonymize=\"location\"]');\n      \n      const location = locationElement?.textContent?.trim() || '';\n\n      // Profile image\n      const imageElement = profileSection.querySelector('img.pv-top-card-profile-picture__image') ||\n                          document.querySelector('.profile-photo-edit__preview') ||\n                          document.querySelector('img[data-anonymize=\"headshot-photo\"]');\n      \n      const imageUrl = imageElement?.getAttribute('src') || '';\n\n      // About section\n      const aboutSection = document.querySelector('#about') || \n                          document.querySelector('[data-section=\"aboutSection\"]');\n      \n      let about = '';\n      if (aboutSection) {\n        const aboutText = aboutSection.nextElementSibling?.querySelector('.pv-shared-text-with-see-more') ||\n                         aboutSection.parentElement?.querySelector('.display-flex.full-width');\n        about = aboutText?.textContent?.trim() || '';\n      }\n\n      // Experience section\n      const experience = this.extractExperienceFromDOM();\n\n      // Current position/company from experience or profile\n      const currentJob = experience?.[0];\n      const company = currentJob?.company || '';\n      const position = currentJob?.title || headline;\n\n      return {\n        fullName,\n        headline,\n        location,\n        company,\n        position,\n        profileUrl: window.location.href,\n        imageUrl,\n        about,\n        experience\n      };\n\n    } catch (error) {\n      console.error('DOM extraction failed:', error);\n      return null;\n    }\n  }\n\n  private static extractExperienceFromDOM(): ExperienceItem[] {\n    try {\n      const experienceSection = document.querySelector('#experience') || \n                               document.querySelector('[data-section=\"experienceSection\"]');\n      \n      if (!experienceSection) return [];\n\n      const experienceItems: ExperienceItem[] = [];\n      const experienceList = experienceSection.parentElement?.querySelectorAll('li.artdeco-list__item') ||\n                            document.querySelectorAll('.pvs-list__item--line-separated');\n\n      experienceList.forEach(item => {\n        try {\n          const titleElement = item.querySelector('.mr1.hoverable-link-text.t-bold') ||\n                              item.querySelector('[data-anonymize=\"job-title\"]');\n          const title = titleElement?.textContent?.trim() || '';\n\n          const companyElement = item.querySelector('.t-normal') ||\n                                item.querySelector('[data-anonymize=\"company-name\"]');\n          const company = companyElement?.textContent?.trim() || '';\n\n          const durationElement = item.querySelector('.t-black--light.t-normal') ||\n                                 item.querySelector('[data-anonymize=\"duration\"]');\n          const duration = durationElement?.textContent?.trim() || '';\n\n          const locationElement = item.querySelector('.t-black--light.t-normal.mt1') ||\n                                 item.querySelector('[data-anonymize=\"job-location\"]');\n          const location = locationElement?.textContent?.trim() || '';\n\n          if (title && company) {\n            experienceItems.push({\n              title,\n              company,\n              duration,\n              location\n            });\n          }\n        } catch (e) {\n          console.warn('Failed to extract experience item:', e);\n        }\n      });\n\n      return experienceItems;\n    } catch (error) {\n      console.error('Experience extraction failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get LinkedIn profile ID from URL\n   */\n  static getProfileId(): string | null {\n    const match = window.location.pathname.match(/\\/in\\/([^\\/]+)/);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * Check if current page is a LinkedIn profile\n   */\n  static isLinkedInProfile(): boolean {\n    return window.location.hostname.includes('linkedin.com') && \n           window.location.pathname.startsWith('/in/');\n  }\n} ","import { LinkedInProfile, ProxycurlProfile } from '../types/profile';\n\nconst PROXYCURL_API_KEY = 'YOUR_PROXYCURL_API_KEY'; // This should be set in manifest or env\n\nexport class ProxycurlService {\n  /**\n   * Fetch profile data from Proxycurl API\n   */\n  static async fetchProfile(linkedinUrl: string): Promise<LinkedInProfile | null> {\n    try {\n      const response = await fetch('https://nubela.co/proxycurl/api/v2/linkedin', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${PROXYCURL_API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          linkedin_profile_url: linkedinUrl,\n          extra: 'include',\n          github_profile_id: 'include',\n          facebook_profile_id: 'include',\n          twitter_profile_id: 'include',\n          personal_contact_number: 'include',\n          personal_email: 'include',\n          inferred_salary: 'include',\n          skills: 'include',\n          use_cache: 'if-present',\n          fallback_to_cache: 'on-error'\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Proxycurl API error: ${response.status}`);\n      }\n\n      const data: ProxycurlProfile = await response.json();\n      return this.transformToLinkedInProfile(data, linkedinUrl);\n    } catch (error) {\n      console.error('Proxycurl fetch failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Transform Proxycurl response to LinkedInProfile format\n   */\n  private static transformToLinkedInProfile(data: ProxycurlProfile, originalUrl: string): LinkedInProfile {\n    // Get current experience (first in list, if any)\n    const currentExperience = data.experiences?.[0];\n    \n    // Transform experience items\n    const experience = data.experiences?.map(exp => ({\n      title: exp.title || '',\n      company: exp.company || '',\n      duration: this.formatDuration(exp.starts_at, exp.ends_at),\n      location: exp.location || '',\n      description: exp.description || ''\n    })) || [];\n\n    // Format education\n    const education = data.education?.map(edu => \n      `${edu.degree_name} ${edu.field_of_study} at ${edu.school}`\n    ).join(', ') || '';\n\n    return {\n      fullName: data.full_name || '',\n      headline: data.headline || '',\n      location: [data.city, data.country].filter(Boolean).join(', '),\n      company: currentExperience?.company || '',\n      position: currentExperience?.title || data.occupation || '',\n      education,\n      profileUrl: originalUrl,\n      imageUrl: data.profile_pic_url || '',\n      about: data.summary || '',\n      experience\n    };\n  }\n\n  /**\n   * Format duration from Proxycurl date objects\n   */\n  private static formatDuration(\n    startDate: { day: number; month: number; year: number } | null,\n    endDate: { day: number; month: number; year: number } | null\n  ): string {\n    if (!startDate) return '';\n\n    const start = `${this.getMonthName(startDate.month)} ${startDate.year}`;\n    \n    if (!endDate) {\n      return `${start} - Present`;\n    }\n\n    const end = `${this.getMonthName(endDate.month)} ${endDate.year}`;\n    return `${start} - ${end}`;\n  }\n\n  private static getMonthName(month: number): string {\n    const months = [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    ];\n    return months[month - 1] || '';\n  }\n\n  /**\n   * Check if Proxycurl service is available\n   */\n  static isAvailable(): boolean {\n    return !!PROXYCURL_API_KEY && PROXYCURL_API_KEY !== 'YOUR_PROXYCURL_API_KEY';\n  }\n} ","import { LinkedInExtractor } from './utils/linkedin-extractor';\nimport { ProxycurlService } from './utils/proxycurl';\nimport { ExtensionMessage, LinkedInProfile } from './types/profile';\n\nclass ContentScript {\n  private extractedProfile: LinkedInProfile | null = null;\n  private isExtracting = false;\n\n  constructor() {\n    this.init();\n  }\n\n  private init(): void {\n    // Only run on LinkedIn profile pages\n    if (!LinkedInExtractor.isLinkedInProfile()) {\n      return;\n    }\n\n    console.log('MeetingBrief: LinkedIn profile detected');\n\n    // Listen for messages from popup/background\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      this.handleMessage(message, sendResponse);\n      return true; // Keep the message channel open for async response\n    });\n\n    // Extract profile data when page loads\n    this.extractProfileData();\n\n    // Re-extract if page content changes (SPA navigation)\n    this.observePageChanges();\n\n    // Add brief creation button to page\n    this.addBriefButton();\n  }\n\n  private async handleMessage(message: ExtensionMessage, sendResponse: (response: any) => void): Promise<void> {\n    switch (message.type) {\n      case 'PROFILE_EXTRACTED':\n        sendResponse({ profile: this.extractedProfile });\n        break;\n\n      case 'CREATE_BRIEF':\n        if (!this.extractedProfile) {\n          await this.extractProfileData();\n        }\n        \n        if (this.extractedProfile) {\n          // Send profile data to background script for processing\n          chrome.runtime.sendMessage({\n            type: 'CREATE_BRIEF',\n            data: {\n              profile: this.extractedProfile,\n              notes: message.data?.notes || ''\n            }\n          });\n          sendResponse({ success: true });\n        } else {\n          sendResponse({ success: false, error: 'Could not extract profile data' });\n        }\n        break;\n\n      default:\n        sendResponse({ error: 'Unknown message type' });\n    }\n  }\n\n  private async extractProfileData(): Promise<void> {\n    if (this.isExtracting) return;\n    this.isExtracting = true;\n\n    try {\n      console.log('MeetingBrief: Extracting profile data...');\n      \n      // Try to extract from page\n      let profile = LinkedInExtractor.extractProfile();\n      \n      // If extraction failed or incomplete, try Proxycurl fallback\n      if (!profile || this.isProfileIncomplete(profile)) {\n        console.log('MeetingBrief: Profile incomplete, trying Proxycurl fallback...');\n        \n        if (ProxycurlService.isAvailable()) {\n          const proxycurlProfile = await ProxycurlService.fetchProfile(window.location.href);\n          \n          if (proxycurlProfile) {\n            // Merge the data, preferring Proxycurl for missing fields\n            profile = this.mergeProfileData(profile, proxycurlProfile);\n          }\n        }\n      }\n\n      this.extractedProfile = profile;\n      \n      if (profile) {\n        console.log('MeetingBrief: Profile extracted successfully:', profile.fullName);\n        \n        // Notify popup that profile is ready\n        chrome.runtime.sendMessage({\n          type: 'PROFILE_EXTRACTED',\n          data: profile\n        });\n      } else {\n        console.warn('MeetingBrief: Failed to extract profile data');\n      }\n    } catch (error) {\n      console.error('MeetingBrief: Profile extraction error:', error);\n    } finally {\n      this.isExtracting = false;\n    }\n  }\n\n  private isProfileIncomplete(profile: LinkedInProfile): boolean {\n    // Check if essential fields are missing\n    return !profile.fullName || \n           (!profile.headline && !profile.position) ||\n           !profile.company;\n  }\n\n  private mergeProfileData(primary: LinkedInProfile | null, fallback: LinkedInProfile): LinkedInProfile {\n    if (!primary) return fallback;\n\n    return {\n      fullName: primary.fullName || fallback.fullName,\n      headline: primary.headline || fallback.headline,\n      location: primary.location || fallback.location,\n      company: primary.company || fallback.company,\n      position: primary.position || fallback.position,\n      education: primary.education || fallback.education,\n      profileUrl: primary.profileUrl,\n      imageUrl: primary.imageUrl || fallback.imageUrl,\n      about: primary.about || fallback.about,\n      experience: primary.experience?.length ? primary.experience : fallback.experience,\n      connections: primary.connections || fallback.connections\n    };\n  }\n\n  private observePageChanges(): void {\n    // Watch for LinkedIn SPA navigation\n    let currentUrl = window.location.href;\n    \n    const observer = new MutationObserver(() => {\n      if (window.location.href !== currentUrl) {\n        currentUrl = window.location.href;\n        \n        if (LinkedInExtractor.isLinkedInProfile()) {\n          console.log('MeetingBrief: Page navigation detected, re-extracting...');\n          setTimeout(() => this.extractProfileData(), 2000); // Wait for page to load\n        }\n      }\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  private addBriefButton(): void {\n    // Add a floating button to create brief\n    const buttonId = 'meetingbrief-create-btn';\n    \n    // Remove existing button if present\n    const existingButton = document.getElementById(buttonId);\n    if (existingButton) {\n      existingButton.remove();\n    }\n\n    const button = document.createElement('button');\n    button.id = buttonId;\n    button.innerHTML = `\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n        <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z\"/>\n        <polyline points=\"14,2 14,8 20,8\"/>\n        <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"/>\n        <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"/>\n        <polyline points=\"10,9 9,9 8,9\"/>\n      </svg>\n      Create Brief\n    `;\n    \n    button.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background: #0073b1;\n      color: white;\n      border: none;\n      border-radius: 24px;\n      padding: 12px 20px;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      font-size: 14px;\n      font-weight: 600;\n      cursor: pointer;\n      box-shadow: 0 4px 12px rgba(0, 115, 177, 0.3);\n      z-index: 9999;\n      transition: all 0.2s ease;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n    `;\n\n    button.addEventListener('mouseenter', () => {\n      button.style.transform = 'translateY(-2px)';\n      button.style.boxShadow = '0 6px 16px rgba(0, 115, 177, 0.4)';\n    });\n\n    button.addEventListener('mouseleave', () => {\n      button.style.transform = 'translateY(0)';\n      button.style.boxShadow = '0 4px 12px rgba(0, 115, 177, 0.3)';\n    });\n\n    button.addEventListener('click', () => {\n      // Open the extension popup or trigger brief creation\n      chrome.runtime.sendMessage({ type: 'OPEN_POPUP' });\n    });\n\n    document.body.appendChild(button);\n  }\n}\n\n// Initialize content script\nnew ContentScript(); "],"mappings":"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","names":["_a"]}