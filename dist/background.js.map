{"version":3,"sources":["../src/utils/auth.ts","../src/utils/api-client.ts","../src/background.ts"],"sourcesContent":["import { AuthState } from '../types/profile';\n\nconst BASE_URL = 'https://meetingbrief.com';\n\nexport class AuthManager {\n  private static readonly TOKEN_KEY = 'meetingbrief_token';\n  private static readonly USER_KEY = 'meetingbrief_user';\n\n  /**\n   * Get current authentication state\n   */\n  static async getAuthState(): Promise<AuthState> {\n    try {\n      const stored = await chrome.storage.local.get([this.TOKEN_KEY, this.USER_KEY]);\n      \n      if (!stored[this.TOKEN_KEY]) {\n        return { isAuthenticated: false };\n      }\n\n      // Verify token with Better Auth\n      const isValid = await this.verifySession(stored[this.TOKEN_KEY]);\n      \n      if (!isValid) {\n        await this.clearAuth();\n        return { isAuthenticated: false };\n      }\n\n      return {\n        isAuthenticated: true,\n        user: stored[this.USER_KEY],\n        token: stored[this.TOKEN_KEY]\n      };\n    } catch (error) {\n      console.error('Auth state check failed:', error);\n      return { isAuthenticated: false };\n    }\n  }\n\n  /**\n   * Authenticate user via Google OAuth using Better Auth\n   */\n  static async authenticate(): Promise<AuthState> {\n    try {\n      // Use Chrome identity API for OAuth\n      const redirectUrl = chrome.identity.getRedirectURL();\n      \n      const authUrl = `${BASE_URL}/api/auth/google?` + new URLSearchParams({\n        redirect_uri: redirectUrl,\n        response_type: 'code',\n        scope: 'openid email profile'\n      });\n\n      return new Promise((resolve) => {\n        chrome.identity.launchWebAuthFlow({\n          url: authUrl,\n          interactive: true\n        }, async (responseUrl) => {\n          if (chrome.runtime.lastError || !responseUrl) {\n            console.error('OAuth failed:', chrome.runtime.lastError);\n            resolve({ isAuthenticated: false });\n            return;\n          }\n\n          try {\n            // Extract auth code from callback URL\n            const url = new URL(responseUrl);\n            const code = url.searchParams.get('code');\n            \n            if (!code) {\n              throw new Error('No auth code received');\n            }\n\n            // Exchange code for session with Better Auth\n            const tokenResponse = await fetch(`${BASE_URL}/api/auth/callback/google`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                code,\n                redirectUrl\n              }),\n              credentials: 'include'\n            });\n\n            if (!tokenResponse.ok) {\n              throw new Error('Token exchange failed');\n            }\n\n            const authData = await tokenResponse.json();\n\n            // Store session data\n            await chrome.storage.local.set({\n              [this.TOKEN_KEY]: authData.token || authData.sessionToken,\n              [this.USER_KEY]: authData.user\n            });\n\n            resolve({\n              isAuthenticated: true,\n              user: authData.user,\n              token: authData.token || authData.sessionToken\n            });\n          } catch (error) {\n            console.error('Auth callback failed:', error);\n            resolve({ isAuthenticated: false });\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Authentication failed:', error);\n      return { isAuthenticated: false };\n    }\n  }\n\n  /**\n   * Sign out user\n   */\n  static async signOut(): Promise<void> {\n    try {\n      const authState = await this.getAuthState();\n      \n      if (authState.isAuthenticated && authState.token) {\n        // Call Better Auth sign out endpoint\n        await fetch(`${BASE_URL}/api/auth/sign-out`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${authState.token}`,\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n      }\n    } catch (error) {\n      console.error('Sign out API call failed:', error);\n    } finally {\n      await this.clearAuth();\n    }\n  }\n\n  /**\n   * Clear local authentication data\n   */\n  private static async clearAuth(): Promise<void> {\n    await chrome.storage.local.remove([this.TOKEN_KEY, this.USER_KEY]);\n  }\n\n  /**\n   * Verify session with Better Auth\n   */\n  private static async verifySession(token: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${BASE_URL}/api/auth/session`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Session verification failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get authenticated fetch headers\n   */\n  static async getAuthHeaders(): Promise<HeadersInit> {\n    const authState = await this.getAuthState();\n    \n    if (authState.isAuthenticated && authState.token) {\n      return {\n        'Authorization': `Bearer ${authState.token}`,\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'Content-Type': 'application/json'\n    };\n  }\n\n  /**\n   * Check if user has remaining usage\n   */\n  static async checkUsage(): Promise<{ hasUsage: boolean; remaining: number }> {\n    try {\n      const headers = await this.getAuthHeaders();\n      \n      const response = await fetch(`${BASE_URL}/api/usage`, {\n        method: 'GET',\n        headers,\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        throw new Error('Usage check failed');\n      }\n\n      const data = await response.json();\n      return {\n        hasUsage: data.remaining > 0,\n        remaining: data.remaining\n      };\n    } catch (error) {\n      console.error('Usage check failed:', error);\n      return { hasUsage: false, remaining: 0 };\n    }\n  }\n}","import { BriefCreationRequest, BriefCreationResponse, LinkedInProfile } from '../types/profile';\nimport { AuthManager } from './auth';\n\nconst BASE_URL = 'https://meetingbrief.com';\n\nexport class MeetingBriefAPI {\n  /**\n   * Create a meeting brief from LinkedIn profile data\n   */\n  static async createBrief(profileData: LinkedInProfile, notes?: string): Promise<BriefCreationResponse> {\n    try {\n      const headers = await AuthManager.getAuthHeaders();\n      \n      const response = await fetch(`${BASE_URL}/api/briefs`, {\n        method: 'POST',\n        headers,\n        credentials: 'include',\n        body: JSON.stringify({\n          profile: {\n            name: profileData.fullName,\n            title: profileData.headline,\n            company: profileData.company,\n            location: profileData.location,\n            about: profileData.about,\n            linkedinUrl: profileData.profileUrl,\n            experience: profileData.experience?.map(exp => ({\n              title: exp.title,\n              company: exp.company,\n              duration: exp.duration,\n              description: exp.description\n            })) || []\n          },\n          notes: notes || ''\n        })\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Please sign in to create meeting briefs');\n        }\n        if (response.status === 429) {\n          throw new Error('You have reached your monthly brief limit. Please upgrade your plan.');\n        }\n        throw new Error(`Failed to create brief: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      return {\n        success: true,\n        briefId: data.id,\n        brief: data.content,\n        redirectUrl: `${BASE_URL}/dashboard?brief=${data.id}`\n      };\n    } catch (error) {\n      console.error('Brief creation failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  /**\n   * Get user's usage statistics\n   */\n  static async getUsage(): Promise<{ remaining: number; total: number; plan: string }> {\n    try {\n      const headers = await AuthManager.getAuthHeaders();\n      \n      const response = await fetch(`${BASE_URL}/api/usage`, {\n        method: 'GET',\n        headers,\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch usage data');\n      }\n\n      const data = await response.json();\n      return {\n        remaining: data.remaining || 0,\n        total: data.total || 0,\n        plan: data.plan || 'free'\n      };\n    } catch (error) {\n      console.error('Usage fetch failed:', error);\n      return { remaining: 0, total: 0, plan: 'free' };\n    }\n  }\n\n  /**\n   * Get user's brief history\n   */\n  static async getBriefHistory(): Promise<Array<{ id: string; name: string; createdAt: string }>> {\n    try {\n      const headers = await AuthManager.getAuthHeaders();\n      \n      const response = await fetch(`${BASE_URL}/api/briefs/history`, {\n        method: 'GET',\n        headers,\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch brief history');\n      }\n\n      const data = await response.json();\n      return data.briefs || [];\n    } catch (error) {\n      console.error('Brief history fetch failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Check if the service is available\n   */\n  static async healthCheck(): Promise<boolean> {\n    try {\n      const response = await fetch(`${BASE_URL}/api/health`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      return response.ok;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return false;\n    }\n  }\n} ","import { AuthManager } from './utils/auth';\nimport { MeetingBriefAPI } from './utils/api-client';\nimport { ExtensionMessage, BriefCreationResponse } from './types/profile';\n\nclass BackgroundScript {\n  constructor() {\n    this.init();\n  }\n\n  private init(): void {\n    // Handle installation\n    chrome.runtime.onInstalled.addListener(this.handleInstalled.bind(this));\n\n    // Handle messages from content script and popup\n    chrome.runtime.onMessage.addListener(this.handleMessage.bind(this));\n\n    // Handle browser action click\n    chrome.action.onClicked.addListener(this.handleActionClick.bind(this));\n\n    // Handle web navigation to detect LinkedIn profile visits\n    chrome.webNavigation?.onCompleted.addListener(this.handleNavigation.bind(this));\n  }\n\n  private handleInstalled(details: any): void {\n    console.log('MeetingBrief extension installed:', details.reason);\n    \n    if (details.reason === 'install') {\n      // Open welcome page or registration\n      chrome.tabs.create({\n        url: 'https://meetingbrief.com/extension-welcome'\n      });\n    }\n  }\n\n  private async handleMessage(\n    message: ExtensionMessage,\n    sender: any,\n    sendResponse: (response: any) => void\n  ): Promise<void> {\n    try {\n      switch (message.type) {\n        case 'CREATE_BRIEF':\n          await this.handleCreateBrief(message.data, sendResponse);\n          break;\n\n        case 'AUTH_STATUS':\n          const authState = await AuthManager.getAuthState();\n          sendResponse(authState);\n          break;\n\n        case 'OPEN_POPUP':\n          await this.openPopup(sender.tab?.id);\n          sendResponse({ success: true });\n          break;\n\n        default:\n          sendResponse({ error: 'Unknown message type' });\n      }\n    } catch (error) {\n      console.error('Background message handling error:', error);\n      sendResponse({ \n        error: error instanceof Error ? error.message : 'Unknown error' \n      });\n    }\n  }\n\n  private async handleCreateBrief(\n    data: { profile: any; notes?: string },\n    sendResponse: (response: any) => void\n  ): Promise<void> {\n    try {\n      // Check authentication\n      const authState = await AuthManager.getAuthState();\n      \n      if (!authState.isAuthenticated) {\n        sendResponse({\n          success: false,\n          error: 'Please sign in to create meeting briefs',\n          requiresAuth: true\n        });\n        return;\n      }\n\n      // Check usage limits\n      const usage = await AuthManager.checkUsage();\n      if (!usage.hasUsage) {\n        sendResponse({\n          success: false,\n          error: 'You have reached your monthly brief limit. Please upgrade your plan.',\n          requiresUpgrade: true\n        });\n        return;\n      }\n\n      // Create the brief\n      const result = await MeetingBriefAPI.createBrief(data.profile, data.notes);\n      \n      if (result.success) {\n        // Show success notification\n        await this.showSuccessNotification(data.profile.fullName, result.redirectUrl!);\n        \n        // Optionally open the brief in a new tab\n        chrome.tabs.create({\n          url: result.redirectUrl,\n          active: false\n        });\n      }\n\n      sendResponse(result);\n    } catch (error) {\n      console.error('Brief creation error:', error);\n      sendResponse({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      });\n    }\n  }\n\n  private async handleActionClick(tab: any): Promise<void> {\n    // If on LinkedIn profile page, open popup\n    if (tab.url?.includes('linkedin.com/in/')) {\n      await this.openPopup(tab.id);\n    } else {\n      // Otherwise, navigate to LinkedIn or show info\n      chrome.tabs.create({\n        url: 'https://www.linkedin.com'\n      });\n    }\n  }\n\n  private async handleNavigation(details: any): Promise<void> {\n    // Only process main frame navigations to LinkedIn profiles\n    if (details.frameId !== 0 || !details.url.includes('linkedin.com/in/')) {\n      return;\n    }\n\n    // Wait a bit for page to load, then check if we can extract profile\n    setTimeout(async () => {\n      try {\n        await chrome.tabs.sendMessage(details.tabId, {\n          type: 'PROFILE_EXTRACTED'\n        });\n      } catch (error) {\n        // Tab might not have content script loaded yet\n        console.log('Content script not ready yet');\n      }\n    }, 3000);\n  }\n\n  private async openPopup(tabId?: number): Promise<void> {\n    if (!tabId) return;\n\n    // Check if popup is already open\n    try {\n      await chrome.tabs.sendMessage(tabId, { type: 'TOGGLE_POPUP' });\n    } catch (error) {\n      console.log('Could not communicate with content script');\n    }\n  }\n\n  private async showSuccessNotification(profileName: string, redirectUrl: string): Promise<void> {\n    const notificationId = `brief-created-${Date.now()}`;\n    \n    await chrome.notifications.create(notificationId, {\n      type: 'basic',\n      iconUrl: 'icons/icon-48.png',\n      title: 'Meeting Brief Created!',\n      message: `Brief for ${profileName} is ready. Click to view.`,\n      buttons: [\n        { title: 'View Brief' },\n        { title: 'Dismiss' }\n      ]\n    });\n\n    // Handle notification clicks\n    chrome.notifications.onButtonClicked.addListener((id: any, buttonIndex: any) => {\n      if (id === notificationId && buttonIndex === 0) {\n        chrome.tabs.create({ url: redirectUrl });\n      }\n      chrome.notifications.clear(id);\n    });\n\n    chrome.notifications.onClicked.addListener((id: any) => {\n      if (id === notificationId) {\n        chrome.tabs.create({ url: redirectUrl });\n        chrome.notifications.clear(id);\n      }\n    });\n\n    // Auto-dismiss after 10 seconds\n    setTimeout(() => {\n      chrome.notifications.clear(notificationId);\n    }, 10000);\n  }\n}\n\n// Initialize background script\nnew BackgroundScript(); "],"mappings":"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","names":["BASE_URL"]}